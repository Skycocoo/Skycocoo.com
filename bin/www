#!/usr/bin/env node

// modules
const app = require('../app');
const config = require('../config/index');

const debug = require('debug')('skycocoo.com:server');
const http = require('http');
// const mongoose = require('mongoose');

// normalize a port into a number, string, or false.
function normalizePort(val) {
     var port = parseInt(val, 10);
     if (isNaN(port)) {
         // named pipe
         return val;
     }
     if (port >= 0) {
         // port number
         return port;
     }
     return false;
 }

 // mongoose.connect(config.mongodb.dsn, { useNewUrlParser: true })
 //    .then(() => {
 //        debug('Successfully connected to MongoDb');
 //    })
 //    .catch((err) => {
 //        debug('Catch a Promise error: ' + err.message);
 //    });

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// http server
var server = http.createServer(app);
server.listen(port);

// logging error
server.on('error', function(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});

// debugging with listening
server.on('listening', function() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
});
